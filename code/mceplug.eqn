; MCE Adapter
; Copyright (C) 2019 by Scorp (Necroware)
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, version 3.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <http://www.gnu.org/licenses/>.
;
; Version: 0.10.0

CHIP MCE 16V8

gnd=10 ; Ground
vcc=20 ; +5V

; -----------------------------------------------------------------------------
; Input
; -----------------------------------------------------------------------------
b=1     ; Blue
v=2     ; V-Sync
g=3     ; Green
h=4     ; H-Sync
r=5     ; Red
bi=6    ; Blue intensity or white in MDA
ri=7    ; Red intensity
gi=8    ; Green intensity or intensity in MDA/CGA
m=9     ; Sync mode detect
/sw2=11 ; Switch
/sw1=12 ; Switch

; -----------------------------------------------------------------------------
; Output
; -----------------------------------------------------------------------------
out_b=13  ; Blue
out_bi=14 ; Blue intensity
out_g=15  ; Green
out_gi=16 ; Green intensity
out_r=17  ; Red
out_ri=18 ; Red intensity
out_s=19  ; C-Sync

; -----------------------------------------------------------------------------
; Separated color components
; -----------------------------------------------------------------------------

@define amber "/sw1 *  sw2"  ; MDA/Hercules amber mode
@define green " sw1 * /sw2"  ; MDA/Hercules green mode
@define white " sw1 *  sw2"  ; MDA/Hercules white mode
@define color "/sw1 * /sw2"  ; CGA/EGA color mode
@define cga   "color * /m"   ; CGA/LowRes-EGA mode (16-colors)
@define ega   "color * m"    ; HiRes-EGA mode (64-colors)

; MDA has only one color (bi) and one intensity (gi)
; The B/W monitor can be simulated by setting RGB to 1,1,1
; The B/G monitor can be simulated by setting RGB to 0,1,0
; The B/A monitor can be simulated by setting RGB to 1,1,0
@define amber_r  "amber * bi"
@define amber_g  "amber * bi"
@define green_g  "green * bi"
@define white_r  "white * bi"
@define white_g  "white * bi"
@define white_b  "white * bi"
@define amber_ri "amber * bi"
@define amber_gi "amber * gi"
@define green_gi "green * gi"
@define white_ri "white * gi"
@define white_gi "white * gi"
@define white_bi "white * gi"

; Color common output
@define color_r "color * r"
@define color_b "color * b"

; CGA/LowRes-EGA has RGB color and one intensity
; It has a hack for brown color on G * R * /B * /I. We can simulate this
; in such combination by setting the green color to 0 and intensity to 1
@define cga_g1  "cga * g * /r"
@define cga_g2  "cga * g * b"
@define cga_g3  "cga * g * gi"
@define brown_i "cga * g * r * /b * /gi"
@define cga_i   "cga * gi"

; HiRes-EGA has RGB color and separate intensity for each channel and no brown hack
@define ega_g  "ega * g"
@define ega_ri "ega * ri"
@define ega_gi "ega * gi"
@define ega_bi "ega * bi"

; -----------------------------------------------------------------------------
EQUATIONS
; -----------------------------------------------------------------------------
out_s = m * v * h + m * /v * /h + /m * v * /h + /m * /v * h
out_r = amber_r + white_r + color_r
out_g = amber_g + green_g + white_g + cga_g1 + cga_g2 + cga_g3 + ega_g
out_b = white_b + color_b
out_ri = amber_ri + white_ri + cga_i + ega_ri
out_gi = amber_gi + green_gi + white_gi + cga_i + ega_gi + brown_i
out_bi = white_bi + cga_i + ega_bi

